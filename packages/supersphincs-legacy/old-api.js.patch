305,307c305,361
< 	hash: function (message, onlyBinary) {
< 		return fastSHA512.hash(message, onlyBinary);
< 	},
---
> 	hash: function (
> 		message,
> 		onlyBinary,
> 		additionalData,
> 		preHashed
> 	) { return initiated.then(function () {
> 		var shouldClearAdditionalData	= typeof additionalData === 'string';
> 		var shouldClearMessage			= typeof message === 'string';
> 
> 		return Promise.resolve().then(function () {
> 			message	= sodiumUtil.from_string(message);
> 
> 			if (preHashed && message.length !== fastSHA512.bytes) {
> 				throw new Error('Invalid pre-hashed message.');
> 			}
> 
> 			return Promise.all([
> 				additionalData === undefined ?
> 					undefined :
> 					fastSHA512.baseHash(
> 						sodiumUtil.from_string(additionalData),
> 						shouldClearAdditionalData
> 					)
> 				,
> 				preHashed ? message : fastSHA512.baseHash(message)
> 			]);
> 		}).then(function (results) {
> 			var additionalDataHash	= results[0];
> 			var messageToHash		= results[1];
> 
> 			if (!additionalDataHash) {
> 				return messageToHash;
> 			}
> 
> 			var fullMessage	= new Uint8Array(additionalDataHash.length + fastSHA512.bytes);
> 			fullMessage.set(additionalDataHash);
> 			fullMessage.set(messageToHash, additionalDataHash.length);
> 			sodiumUtil.memzero(additionalDataHash);
> 
> 			if (!preHashed) {
> 				sodiumUtil.memzero(messageToHash);
> 			}
> 
> 			return fastSHA512.baseHash(fullMessage, true);
> 		}).then(function (hash) {
> 			if (shouldClearMessage) {
> 				sodiumUtil.memzero(message);
> 			}
> 
> 			if (onlyBinary) {
> 				return hash;
> 			}
> 			else {
> 				return {binary: hash, hex: sodiumUtil.to_hex(hash)};
> 			}
> 		});
> 	}); },
384c438,450
< 		return hashWithAdditionalData(message, additionalData, preHashed).then(function (hash) {
---
> 		if (
> 			additionalData === undefined &&
> 			typeof console !== 'undefined' &&
> 			typeof console.warn === 'function'
> 		) {
> 			console.warn(
> 				'If possible, `additionalData` should be specified as at least ' +
> 				'`new Uint8Array(0)`. See here for clarification: ' +
> 				'https://github.com/cyph/supersphincs/blob/8337ad7/supersphincs.js#L307'
> 			);
> 		}
> 
> 		return superSphincs.hash(message, false, additionalData, preHashed).then(function (hash) {
388c454
< 					hash,
---
> 					hash.binary,
396c462
< 					hash,
---
> 					hash.binary,
414c480
< 			sodiumUtil.memzero(hash);
---
> 			sodiumUtil.memzero(hash.binary);
441,447c507
< 	open: function (
< 		signed,
< 		publicKey,
< 		additionalData,
< 		knownGoodHash,
< 		includeHash
< 	) { return initiated.then(function () {
---
> 	open: function (signed, publicKey, additionalData) { return initiated.then(function () {
469,471c529
< 				additionalData,
< 				knownGoodHash,
< 				includeHash
---
> 				additionalData
475,476c533
< 			var hash	= includeHash ? results[1].hash : undefined;
< 			var isValid	= includeHash ? results[1].valid : results[1];
---
> 			var isValid	= results[1];
483c540
< 				return includeHash ? {hash: hash, message: message} : message;
---
> 				return message;
497,518c554,555
< 	openString: function (
< 		signed,
< 		publicKey,
< 		additionalData,
< 		knownGoodHash,
< 		includeHash
< 	) { return initiated.then(function () {
< 		return superSphincs.open(
< 			signed,
< 			publicKey,
< 			additionalData,
< 			knownGoodHash,
< 			includeHash
< 		).then(function (message) {
< 			var hash	= undefined;
< 
< 			if (includeHash) {
< 				hash	= sodiumUtil.to_hex(message.hash);
< 				sodiumUtil.memzero(message.hash);
< 				message	= message.message;
< 			}
< 
---
> 	openString: function (signed, publicKey, additionalData) { return initiated.then(function () {
> 		return superSphincs.open(signed, publicKey, additionalData).then(function (message) {
521,522c558
< 
< 			return includeHash ? {hash: hash, message: s} : s;
---
> 			return s;
530,532c566
< 		additionalData,
< 		knownGoodHash,
< 		includeHash
---
> 		additionalData
536c570
< 		return hashWithAdditionalData(message, additionalData).then(function (hash) {
---
> 		return superSphincs.hash(message, false, additionalData).then(function (hash) {
539,562d572
< 			var shouldClearKnownGoodHash	= false;
< 			if (typeof knownGoodHash === 'string' && knownGoodHash.length > 0) {
< 				knownGoodHash				= sodiumUtil.from_hex(knownGoodHash);
< 				shouldClearKnownGoodHash	= true;
< 			}
< 			var hashAlreadyVerified	=
< 				knownGoodHash instanceof Uint8Array &&
< 				knownGoodHash.length > 0 &&
< 				sodiumUtil.memcmp(hash, knownGoodHash)
< 			;
< 			if (shouldClearKnownGoodHash) {
< 				sodiumUtil.memzero(knownGoodHash);
< 			}
< 
< 			var publicKeyPromise	=
< 				hashAlreadyVerified ?
< 					undefined :
< 				publicKey instanceof Uint8Array ?
< 					Promise.resolve(publicKey) :
< 					superSphincs.importKeys(publicKey).then(function (kp) {
< 						return kp.publicKey;
< 					})
< 			;
< 
565,586c575,592
< 				hashAlreadyVerified || publicKeyPromise.then(function (pk) {
< 					return rsaSign.verifyDetached(
< 						new Uint8Array(signature.buffer, signature.byteOffset, rsaSign.bytes),
< 						hash,
< 						new Uint8Array(pk.buffer, pk.byteOffset, rsaSign.publicKeyBytes)
< 					);
< 				}),
< 				hashAlreadyVerified || publicKeyPromise.then(function (pk) {
< 					return sphincs.verifyDetached(
< 						new Uint8Array(
< 							signature.buffer,
< 							signature.byteOffset + rsaSign.bytes,
< 							sphincsBytes.bytes
< 						),
< 						hash,
< 						new Uint8Array(
< 							pk.buffer,
< 							pk.byteOffset + rsaSign.publicKeyBytes,
< 							sphincsBytes.publicKeyBytes
< 						)
< 					);
< 				})
---
> 				rsaSign.verifyDetached(
> 					new Uint8Array(signature.buffer, signature.byteOffset, rsaSign.bytes),
> 					hash.binary,
> 					new Uint8Array(publicKey.buffer, publicKey.byteOffset, rsaSign.publicKeyBytes)
> 				),
> 				sphincs.verifyDetached(
> 					new Uint8Array(
> 						signature.buffer,
> 						signature.byteOffset + rsaSign.bytes,
> 						sphincsBytes.bytes
> 					),
> 					hash.binary,
> 					new Uint8Array(
> 						publicKey.buffer,
> 						publicKey.byteOffset + rsaSign.publicKeyBytes,
> 						sphincsBytes.publicKeyBytes
> 					)
> 				)
592d597
< 			var valid			= rsaIsValid && sphincsIsValid;
598,602c603
< 			if (includeHash) {
< 				return {hash: hash, valid: valid};
< 			}
< 
< 			sodiumUtil.memzero(hash);
---
> 			sodiumUtil.memzero(hash.binary);
604c605
< 			return valid;
---
> 			return rsaIsValid && sphincsIsValid;
732c733,737
< 			if (keyData.private && typeof keyData.private.combined === 'string') {
---
> 			if (keyData.private == null) {
> 				return null;
> 			}
> 
> 			if (keyData.private.combined) {
742,746c747
< 			else if (
< 				keyData.private &&
< 				typeof keyData.private.classical === 'string' &&
< 				typeof keyData.private.postQuantum === 'string'
< 			) {
---
> 			else {
